//线段树的区间合并问题 洛谷p2572
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int N = 4e5 + 100;
// pre维护最长前缀长度 len维护区间最长长度 suf维护最长后缀长度
int arr[N / 4];
int sum[N];
int pre1[N];
int len1[N];
int suf1[N];
int pre0[N]; // 因为还有反转操作 要加上0的信息
int len0[N];
int suf0[N];
int chg[N];  // 懒更新标记要改为那个数字
bool upd[N]; // 懒更新标记是否有没有重置
bool rv[N];  // 懒更新是否有过反转操作
int n, m;
void up(int p, int ln, int rn)
{
    int u = p << 1, v = p << 1 | 1; // u:左儿子 v:右儿子
    sum[p] = sum[u] + sum[v];

    // 四种情况结合一下 以1为例
    // 1：左右内部都有0
    // 2：左全为1
    // 3：右全为1
    // 4：左右都全为1
    len0[p] = max(max(len0[u], len0[v]), suf0[u] + pre0[v]);
    pre0[p] = len0[u] == ln ? ln + pre0[v] : pre0[u];
    suf0[p] = len0[v] == rn ? suf0[u] + rn : suf0[v];

    len1[p] = max(max(len1[u], len1[v]), suf1[u] + pre1[v]);
    pre1[p] = len1[u] == ln ? ln + pre1[v] : pre1[u];
    suf1[p] = len1[v] == rn ? suf1[u] + rn : suf1[v];
}

void updlz(int p, int n, int c) // 重置操作的懒更新
{
    upd[p] = 1;
    chg[p] = c;
    rv[p] = 0;      // 重置时把原本的反转解除***
    sum[p] = n * c; // 重置直接写等于
    if (c == 0)
    {
        len0[p] = pre0[p] = suf0[p] = n;
        len1[p] = pre1[p] = suf1[p] = 0;
    }
    else
    {
        len0[p] = pre0[p] = suf0[p] = 0;
        len1[p] = pre1[p] = suf1[p] = n;
    }
}
void rvlz(int p, int n) // 反转的懒更新
{
    rv[p] = !rv[p]; // 反转两次相当于没反转*************************************
    sum[p] = n - sum[p];
    swap(len0[p], len1[p]);
    swap(pre0[p], pre1[p]);
    swap(suf0[p], suf1[p]);
}
void down(int p, int ln, int rn)
{
    int u = p << 1, v = p << 1 | 1;
    if (upd[p]) // 重置的优先级大于反转
    {
        upd[p] = 0;
        updlz(u, ln, chg[p]);
        updlz(v, rn, chg[p]);
    }
    if (rv[p])
    {
        rv[p] = 0;
        rvlz(u, ln);
        rvlz(v, rn);
    }
}
int gs(int jl, int jr, int l, int r, int p)
{
    if (jl <= l && r <= jr)
    {
        return sum[p];
    }
    int mid = l + r >> 1;
    down(p, mid - l + 1, r - mid);
    int res = 0;
    if (jl <= mid)
        res += gs(jl, jr, l, mid, p << 1);
    if (jr > mid)
        res += gs(jl, jr, mid + 1, r, p << 1 | 1);
    return res;
}
vector<int> query(int jl, int jr, int l, int r, int p) // 找能到影响[jl,jr]区间的区间 再将其三个信息拼凑起来 就是[jl,jr]的
{
    vector<int> a;
    if (jl <= l && r <= jr)
    {
        a.push_back(len1[p]);
        a.push_back(pre1[p]);
        a.push_back(suf1[p]);
        return a;
    }
    int mid = l + r >> 1;
    int ln = mid - l + 1, rn = r - mid;
    down(p, ln, rn);
    if (jr <= mid)//目标全在该线段左边
        return query(jl, jr, l, mid, p << 1); // 这里是jr<=mid
    if (jl > mid)//目标全在该选段右边
        return query(jl, jr, mid + 1, r, p << 1 | 1); // jl>mid
    //目标区间小于该区间 并且 目标区间与该区间存在交集
    vector<int> l1 = query(jl, jr, l, mid, p << 1);
    vector<int> l2 = query(jl, jr, mid + 1, r, p << 1 | 1);
    //这是区间[jl,mid]和[mid+1,jr]的信息
    int llen = l1[0], lpre = l1[1], lsuf = l1[2];
    int rlen = l2[0], rpre = l2[1], rsuf = l2[2];
    //处理有关目标区间的三个信息
    //因为不一定是该区间完全覆盖目标区间所以要去max和min********
    int len = max(max(llen, rlen), lsuf + rpre);//********
    int pre = llen < mid - max(l, jl) + 1 ? lpre : (llen + rpre);//*********
    int suf = rlen < min(jr, r) - mid ? rsuf : (lsuf + rlen);//******
    a.push_back(len);
    a.push_back(pre);
    a.push_back(suf);
    return a;
}

void build(int l, int r, int p) // 建树
{
    if (l == r)
    {
        sum[p] = arr[l];
        if (arr[l] == 0)
        {
            len0[p] = pre0[p] = suf0[p] = 1;
            len1[p] = pre1[p] = suf1[p] = 0;
        }
        else
        {
            len0[p] = pre0[p] = suf0[p] = 0;
            len1[p] = pre1[p] = suf1[p] = 1;
        }
        return; // 不要忘记return
    }
    int mid = l + r >> 1;
    build(l, mid, p << 1);
    build(mid + 1, r, p << 1 | 1);
    up(p, mid - l + 1, r - mid);
}
void update(int jl, int jr, int l, int r, int p, int c)
{
    if (jl <= l && r <= jr)
    {
        updlz(p, r - l + 1, c);
        return;
    }
    int mid = l + r >> 1;
    down(p, mid - l + 1, r - mid);
    if (jl <= mid)
        update(jl, jr, l, mid, p << 1, c);
    if (jr > mid)
        update(jl, jr, mid + 1, r, p << 1 | 1, c);
    up(p, mid - l + 1, r - mid);
}
void reverse(int jl, int jr, int l, int r, int p)
{
    if (jl <= l && r <= jr)
    {
        rvlz(p, r - l + 1);
        return;
    }
    int mid = l + r >> 1;
    down(p, mid - l + 1, r - mid);
    if (jl <= mid)
        reverse(jl, jr, l, mid, p << 1);
    if (jr > mid)
        reverse(jl, jr, mid + 1, r, p << 1 | 1);
    up(p, mid - l + 1, r - mid);
}
//洛谷p2894
int find(int l, int r, int p, int x)//查询是否有长度为x的区间
{
    if (len[p] < x)
        return 0;
    if (l == r)
        return l;
   
    int mid = l + r >> 1;
    down(p,mid-l+1,r-mid);
    int u = p << 1, v = p << 1 | 1;
    if (len[u] >= x)
        return find(l, mid, u, x);
    if (suf[u] + pre[v] >= x)//返回主要靠这边
        return mid - suf[u] + 1;
    return find(mid + 1, r, v, x);
}
signed main()
{
    cin >> n >> m;
    for (int i = 1; i <= n; i++)
    {
        cin >> arr[i];
    }
    build(1, n, 1);
    while (m--)
    {
        int op, l, r;
        cin >> op >> l >> r;
        l++, r++;
        if (op == 0 || op == 1)
        {
            update(l, r, 1, n, 1, op);
        }
        else if (op == 2)
        {
            reverse(l, r, 1, n, 1);
        }
        else if (op == 3)
        {
            cout << gs(l, r, 1, n, 1) << endl;
        }
        else
        {
            vector<int> a = query(l, r, 1, n, 1);
            cout << a[0] << endl;
        }
    }
    return 0;
}
