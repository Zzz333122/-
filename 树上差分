//点差分 p3128
//***********************************************************************************************************************************************************************************************************************************
    int len = log2(n) + 1;
    vc<vc<int>> st(n + 1, vc<int>(len + 1));       // st表
    vc<int> dep(n + 1);                            // 高度
    vc<int> fa(n + 1);                             // u节点的爸爸
    auto dfs = [&](auto dfs, int u, int p) -> void // dfs一遍获得st表 和每个节点的父亲是谁 以及高度
    {
        st[u][0] = p;
        fa[u] = p;
        dep[u] = dep[p] + 1;
        for (int i = 1; i <= len; i++)
        {
            st[u][i] = st[st[u][i - 1]][i - 1];
        }
        for (int v : g[u])
        {
            if (v != p)
            {
                dfs(dfs, v, u);
            }
        }
    };
    auto lca = [&](int a, int b) // lca
    {
        if (a == b)
            return a;
        if (dep[a] < dep[b])
            swap(a, b);
        for (int i = len; i >= 0; i--)
        {
            if (dep[st[a][i]] >= dep[b])
            {
                a = st[a][i];
            }
        }
        if (a == b)
            return a;
        for (int i = len; i >= 0; i--)
        {
            if (st[a][i] != st[b][i])
            {
                a = st[a][i];
                b = st[b][i];
            }
        }
        a = st[a][0];
        return a;
    };
    dfs(dfs, 1, 0);
    vc<int> w(n + 1); // 点权

    auto dcf = [&](int x, int y, int c) // 点差分
    {
        int F = lca(x, y);
        w[x] += c;
        w[y] += c;
        w[F] -= c;
        w[fa[F]] -= c;
    };
    /*
     w[x]+=c;
     w[y]+=c;
     w[lac]-=c;
     w[fa[lca]]-=c;
    */

    auto merge = [&](auto merge, int u, int p) -> void // 合并差分
    {
        for (int v : g[u])
        {
            if (v != p)
            {
                merge(merge, v, u);
                w[u] += w[v]; // 父节点的点权加上所有儿子的点权
            }
        }
        mx = max(mx, w[u]);
    };
    //***********************************************************************************************************************************************************************************************************************************
