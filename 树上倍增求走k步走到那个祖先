//树上倍增 求往上走k步走到哪个祖先
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int N = 1e5 + 100;
vector<int> g[N];
int dep[N];
int n;
int st[N][17];
int p = 0;
void dfs(int u, int pp) // 树上倍增
{
    if (u == 1)
    {
        dep[u] = 1;
    }
    else
        dep[u] = dep[pp] + 1;
    st[u][0] = pp;

    for (int i = 1; i <= p; i++)
    {
        st[u][i] = st[st[u][i - 1]][i - 1];
        if (u == 4)
            cout << st[u][i] << endl;
    }
    if (g[u].size() == 1 && g[u][0] == pp)//切记要把回溯放到构造st表后面
        return;
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        if (v == pp)
            continue;
        dfs(v, u);
    }
}
int jump(int u, int k) // k是步数
{
    if (dep[u] <= k)
        return -1;

    for (int i = p; i >= 0; i--)
    {
        if ((1 << i) <= k) // 如果走的步数小于等于k就跳跃
        {
            u = st[u][i];
            k -= (1 << i);
        }
    }
    return u;
}

signed main()
{
    cin >> n;
    p = log2(n);
    for (int i = 1; i < n; i++)
    {
        int x, y;
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    dfs(1, 0);
    // for (int i = 1; i <= n; i++)
    //  cout << dep[i] << ' ';
    //for (int i = 0; i <= p; i++)
   //     cout << st[4][i] << ' ';
    int q;
    cin >> q;
    while (q--)
    {
        int u, k;
        cin >> u >> k;
        cout << jump(u, k) << endl;
    }

    return 0;
}
