//书上01背包 朴素版
#include <bits/stdc++.h>
using namespace std;
const int N = 400;
int f[N][N];
int n, m;
vector<int> g[N];
void dfs(int u)
{
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        dfs(v);//处理子树
        for (int j = m; j >= 1; j--)//01背包从后往前枚举背包容量
        {
            for (int k = 0; k < j; k++)//枚举要从子树中选择多少个 不能大于j 必须要选择父亲
            {
                f[u][j] = max(f[u][j], f[u][j - k] + f[v][k]);
            }
        }
    }
}
signed main()
{
    cin >> n >> m;
    m++; // 添加一个0号节点把森林连成一棵树
    for (int i = 1; i <= n; i++)
    {
        int p, w;
        cin >> p >> w;
        g[p].push_back(i);
        f[i][1] = w; // i号节点选1个的时候就是直选自己
    }
    dfs(0);
    cout << f[0][m];
    return 0;
}
//dfn序优化书上背包 O(nm)
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int N = 500;
int w[N];
vector<int> g[N];
int n, m;
int dfn[N];
int f[N][N];// 当来到i节点后续所有dfn序都考虑 后如果可以出现一个总头部 能连的起来的的有效结构的最大值
int idx = 0;
int sz[N];
int val[N];
int dfs(int u)
{
    //  dfn[++idx] = u; // 获得dfn序
    val[++idx] = w[u];
    int t=idx;//下面不能直接写idx idx在下面会更新
    sz[idx] = 1;
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        sz[t] += dfs(v); // 可以这样获得sz的大小 用int类型的返回
    }
    return sz[t];
}

signed main()
{
    cin >> n >> m;
    w[0]=0;

    for (int i = 1; i <= n; i++)
    {
        int p;
        cin >> p;
        cin >> w[i];
        g[p].push_back(i);
    }
    dfs(0);                          // 注意0的dfn序是1
                                     // cout << idx << endl;
    //从n+1开始假象出一个空节点 代表什么都不选的情况
    // 有助于转移一个都不选的情况
    for (int i = n + 1; i >= 2; i--) // dfn序从后往前遍历 /// 因为有假想头部的存在所以不需要遍历根节点也可以因为根节点必须选 只需最后答案 w[0]+f[2][总体积-0的体积]即可*********
    {
        for (int j = 1; j <= m; j++)
        {
            f[i][j] = max(f[i + sz[i]][j], f[i + 1][j - 1] + val[i]);
            // 不选i就不能选i的子树，所以+sz[i]********** 
            ///因为要满足有效结构******** 所以不选i就不能选i的儿子
            ///因为每次都满足了有效结构 所以最后选出来也是一个有效结构
            // 选i就可以选其后面的所有点
        }
    }
    cout << w[0] + f[2][m];
    return 0;
}
