//p5410
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int N = 2e7 + 10;

string s, c;
int z[N];
int e[N];
void exkmp()
{
    z[1] = s.size();
    int ans = s.size() + 1;
    s = ' ' + s;

    // r是最长匹配的右边界 l是右边界对应的左边界（相当于manacher的c
    for (int i = 2, r = 1, l = 1, len = 0; i < s.size(); i++) // 求解Z-box //l,r用来维护区间 l,r满足s[l,r]=s[1,r-l+1]
    {
        len = i <= r ? min(r - i + 1, z[i - l + 1]) : 0; // 如果i在盒子内 则有s[i,r]=s[i-l+1,r-l+1] ,但是不能超过盒子外，盒子外是未知的
        while (i + len < s.size() && s[i + len] == s[1 + len])
            len++; // 超过盒子外就暴力枚举，看一下后面是否匹配，再盒子内一定不匹配了
        if (i + len - 1 > r)
        {
            l = i, r = i + len - 1; // 维护有段带你最靠右的匹配段 并且要保证l<=i
        }
        z[i] = len;
        //cout << z[i] << endl;
        ans ^= i * (z[i] + 1);
    }
    cout << ans << endl;
    ans = 0;
    c = ' ' + c;
    // 看s和c的LCP
    for (int i = 1, l = 0, r = 0, len = 0; i < c.size(); i++) // 与其他字符串的其实于上面同理
    {
        len = i <= r ? min(r - i + 1, z[i - l + 1]) : 0;
        while (1 + len < s.size() && i + len < c.size() && s[1 + len] == c[i + len])
            len++;
        if (i + len - 1 > r)
        {
            l = i, r = i + len - 1;
        }
        e[i] = len;
        ans ^= i * (e[i] + 1);
    }
    cout << ans << endl;
}

signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> c;
    cin >> s;

    exkmp();
    return 0;
}
