//利用最大子树的节点最小求解重心
#include<iostream>
#include<vector>
using namespace std;
#define int long long 
const int N=2e5+100;
int n;
vector<int> g[N];
int ct,ans;
int sz[N];//以u为节点子树的大小

void dfs(int u,int p)
{
    sz[u]=1;
    int res=0;
    for(int i=0;i<g[u].size();i++)
    {
        int v=g[u][i];
        if(v==p) continue;
        dfs(v,u);
        res=max(res,sz[v]);
        sz[u]+=sz[v];
    }
    res=max(res,n-sz[u]);
    if(res < ans || (res==ans && u<ct))//寻找最大子树节点最少的点就是重心
    {
        u=ct;
        res=ans;
    }
}


signed main()
{
    cin>>n;
    for(int i=1;i<n;i++)
    {
        int u,v;
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1,0);
    cout<<ct<<' '<<ans<<endl;


    return 0;
}
//利用重心子树的最大节点数不超过总结点数的一半求解
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int N = 2e5 + 100;
int n;
vector<int> g[N];
vector<int> ans;
;          // 储存重心
int sz[N]; // 以u为节点子树的大小

void dfs(int u, int p)
{
    sz[u] = 1;
    int res = 0;
    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i];
        if (v == p)
            continue;
        dfs(v, u);
        sz[u] += sz[v];
        res = max(res, sz[v]);
    }
    res = max(res, n - sz[u]);
    if (res <= n / 2)
    {
        ans.push_back(u);
    }
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n;
    for (int i = 1; i < n; i++)
    {
        int u, v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1, 0);
    sort(ans.begin(), ans.end());
    for (int i = 0; i < ans.size(); i++)
        cout << ans[i] << ' ';

    return 0;
}
//利用其他节点到重心的距离和最小求解 树上DP (有点权有边权）
//若无点权无边权只需要把这里的点权和边权换成1即可
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define int long long 
const int N = 1e6, INF = 1e18;
int n;
struct node
{
    int v, w;//边权不影响重心的求解
};
vector<node> g[N];
int ans = INF;
int ct;
int sz[N];                      // 以u为节点子树的大小
int f[N];                       // dp
int w[N];                       // 如果节点无权值W相当于为1
void dfs(int u, int p, int dep) // 注意这里的根节点dep为0
{
    sz[u] = w[u];//原先的sz[u]=1 因为有点权的存在改为=w[u]

    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i].v;
        if (v == p || v == 0)
            continue;
        dfs(v, u, dep + g[u][i].w);//因为有边权的存在不再是dep+1而是+边权

        sz[u] += sz[v];
    }
    f[1] += dep * w[u];
    return;
}
void dp(int u, int p)
{

    for (int i = 0; i < g[u].size(); i++)
    {
        int v = g[u][i].v;
        int w = g[u][i].w;
        if (v == p || v == 0)
            continue;
        f[v] = f[u] + (sz[1] - sz[v] * 2) * w;//因为有边权的存在 所以要乘u~v之间的距离
        dp(v, u);
    }

    if (f[u] < ans)
    {
        ans = f[u];
        ct = u;
    }
    return;
}
signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> w[i];
    for (int i = 1; i < n; i++)
    {
        int u, v, w;
        cin >> u >> v;
        cin >> w;
        g[u].push_back({v, w});
        g[v].push_back({u, w});
    }
    dfs(1, 0, 0);
    dp(1, 0);
    // for (int i = 1; i <= n; i++)
    //     cout << f[i] << ' ';
    // cout << endl;
    cout << ans << endl;
    return 0;
}
