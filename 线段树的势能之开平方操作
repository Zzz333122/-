//线段树的势能之开平方操作 见洛谷P4515
#include <bits/stdc++.h>
using namespace std;
#define int long long
const int N = 4e5 + 100;
int sum[N];//用来存储sum
int mx[N];//用区间的max来维护势能如果mx为1则势能为0就不需要在进行开平方
int arr[N / 4];
int n, m;
void up(int p)
{
    sum[p] = sum[p << 1] + sum[p << 1 | 1];
    mx[p] = max(mx[p << 1], mx[p << 1 | 1]);
    return;
}
//因为不满足懒更新所以没有donw
void build(int l, int r, int p)
{
    if (l == r)
    {
        mx[p] = arr[l];
        sum[p] = arr[l];
        return;
    }
    int mid = l + r >> 1;
    build(l, mid, p << 1);
    build(mid + 1, r, p << 1 | 1);
    up(p);
    return;
}
int getsum(int jl, int jr, int l, int r, int p)
{
    if (jl <= l && r <= jr)
    {

        return sum[p];
    }
    int mid = l + r >> 1;
    int res = 0;
    if (jl <= mid)
        res += getsum(jl, jr, l, mid, p << 1);
    if (jr > mid)
        res += getsum(jl, jr, mid + 1, r, p << 1 | 1);
    return res;
}
void sqrtt(int jl, int jr, int l, int r, int p)
{
   
    if (l == r)
    {
        sum[p] = sqrt(sum[p]);
        mx[p] = sum[p];
        return;
    }
    int mid = l + r >> 1;
    if (jl <= mid && mx[p<<1]>1)//剪枝：如果子节点mx<1就不用再往下跳了
        sqrtt(jl, jr, l, mid, p << 1);
    if (jr > mid && mx[p<<1|1]>1)//同理
        sqrtt(jl, jr, mid + 1, r, p << 1 | 1);
    up(p);
    return;
}

signed main()
{
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> arr[i];
    build(1, n, 1);
    cin >> m;
    while (m--)
    {
        int op, l, r;
        cin >> op >> l >> r;
        if(l>r) swap(l,r);
        if (op == 0)
            sqrtt(l, r, 1, n, 1);
        else
            cout << getsum(l, r, 1, n, 1) << endl;
    }

    return 0;
}
